/* The above code is a Node.js backend implementation for user authentication and profile management
functionalities. Here is a summary of what each function does: */
const crypto = require('crypto');
const cloudinary = require('cloudinary').v2;

const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const fs = require('fs');

// Th√™m v√†o userController.js
const RefreshToken = require('../models/RefreshToken'); // Import model m·ªõi
// H·ªó tr·ª£ t·∫°o Refresh Token
const createRefreshToken = async (userId) => {
    const token = crypto.randomBytes(40).toString('hex');
    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // V√≠ d·ª•: 7 ng√†y

    const refreshToken = new RefreshToken({
        token,
        userId,
        expiresAt,
    });
    await refreshToken.save();
    return token;
};

exports.signup = async (req, res) => {
  try {
    const { name, email, password } = req.body;
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ message: 'Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i' });
    user = new User({ name, email, password });
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(password, salt);
    await user.save();
    const payload = { id: user.id, role: user.role };
    const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' }); 
¬† ¬† res.json({ token });
  } catch (err) {
    res.status(500).json({ message: 'Server l·ªói' });
  }
};

// controllers/userController.js - S·ª≠a exports.login

exports.login = async (req, res) => {
    try {
        const { email, password } = req.body
        const user = await User.findOne({ email })
        if (!user)
            return res.status(400).json({ message: "Th√¥ng tin x√°c th·ª±c kh√¥ng h·ª£p l·ªá" })
        const isMatch = await bcrypt.compare(password, user.password)
        if (!isMatch)
            return res.status(400).json({ message: "Th√¥ng tin x√°c th·ª±c kh√¥ng h·ª£p l·ªá" })
        
        // N·∫øu user ch∆∞a c√≥ role th√¨ m·∫∑c ƒë·ªãnh l√† "user"
        if (!user.role) user.role = "user"
        
        // Access Token
        const payload = { id: user.id, role: user.role }
        const accessToken = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: "1h" })

        // üü¢ KH·∫ÆC PH·ª§C L·ªñI: G·ªçi v√† g√°n Refresh Token
        const refreshToken = await createRefreshToken(user._id); // D√πng h√†m ƒë√£ ƒë·ªãnh nghƒ©a ·ªü tr√™n
        
        // Tr·∫£ l·∫°i c·∫£ token v√† th√¥ng tin user
        res.json({
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
            accessToken,
            refreshToken, // Bi·∫øn n√†y gi·ªù ƒë√£ c√≥ gi√° tr·ªã
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                role: user.role,
            },
        })
    } catch (err) {
        console.error("L·ªói ƒëƒÉng nh·∫≠p:", err)
        res.status(500).json({ message: "Server l·ªói khi ƒëƒÉng nh·∫≠p" })
    }
}

// S·ª≠a exports.logout ƒë·ªÉ x√≥a Refresh Token kh·ªèi DB (Revoke)
exports.logout = async (req, res) => {
    // Y√™u c·∫ßu client g·ª≠i Refresh Token trong body/header (t√πy c·∫•u h√¨nh frontend)
    const { refreshToken } = req.body; 
    
    if (refreshToken) {
        await RefreshToken.deleteOne({ token: refreshToken });
    }

    res.json({ message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng, token ƒë√£ b·ªã thu h·ªìi!' });
};

exports.getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    res.json(user);
  } catch (err) {
    res.status(500).json({ message: 'Server l·ªói' });
  }
};

exports.updateProfile = async (req, res) => {
  try {
    const { name, password } = req.body;
    const updates = { name };
    if (password) {
      const salt = await bcrypt.genSalt(10);
      updates.password = await bcrypt.hash(password, salt);
    }
    const user = await User.findByIdAndUpdate(req.user.id, updates, { new: true }).select('-password');
    res.json(user);
  } catch (err) {
    res.status(500).json({ message: 'Server l·ªói' });
  }
};

// Ch·ª©c nƒÉng d√†nh cho admin l·∫•y danh s√°ch v√† x√≥a ng∆∞·ªùi d√πng
exports.getUsers = async (req, res) => {
  try {
    const users = await User.find().select('-password');
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: 'Server l·ªói' });
  }
};

exports.deleteUser = async (req, res) => {
  try {
    await User.findByIdAndDelete(req.params.id);
    res.json({ message: 'Ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a!' });
  } catch (err) {
    res.status(500).json({ message: 'Server l·ªói' });
  }
};

// Th√™m ch·ª©c nƒÉng x√≥a ch√≠nh m√¨nh cho user(role)
exports.deleteSelf = async (req, res) => {
  try {
    // S·ª≠ d·ª•ng ID ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ JWT token (req.user.id)
    const user = await User.findByIdAndDelete(req.user.id); 

    if (!user) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ƒë·ªÉ x√≥a.' });
    }

    res.json({ message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!' });
  } catch (err) {
    res.status(500).json({ message: 'Server l·ªói' });
  }
};

//Th√™m ch·ª©c nƒÉng qu√™n m·∫≠t kh·∫©u, ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† upload avatar
exports.forgotPassword = async (req, res) => {
¬† try {
¬† ¬† const user = await User.findOne({ email: req.body.email });
¬† ¬† if (!user) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!' });

¬† ¬† // T·∫°o token reset
¬† ¬† const token = crypto.randomBytes(20).toString('hex');
¬† ¬† user.resetToken = token;
¬† ¬† user.resetTokenExpiration = Date.now() + 3600000; // 1 gi·ªù
¬† ¬† await user.save();

¬† ¬† const transporter = nodemailer.createTransport({
    host: 'smtp.gmail.com',
    port: 465,
    secure: true, 
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    },
});
    // K·∫æT TH√öC C·∫§U H√åNH NODEMAILER M·ªöI

¬† ¬† // G·ª≠i email
¬† ¬† const mailOptions = {
¬† ¬† ¬† ¬† to: user.email,
¬† ¬† ¬† ¬† subject: 'Y√™u c·∫ßu ƒê·∫∑t l·∫°i M·∫≠t kh·∫©u',
¬† ¬† ¬† ¬† text: `B·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y v√¨ b·∫°n (ho·∫∑c ng∆∞·ªùi kh√°c) ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.\n\n` +
¬† ¬† ¬† ¬† ¬† ¬† ¬† `Vui l√≤ng nh·∫•p v√†o li√™n k·∫øt sau ho·∫∑c d√°n n√≥ v√†o tr√¨nh duy·ªát c·ªßa b·∫°n ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh:\n\n` +
¬† ¬† ¬† ¬† ¬† ¬† ¬† `http://localhost:5173/reset?token=${token}\n\n` +
¬† ¬† ¬† ¬† ¬† ¬† ¬† `N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëi·ªÅu n√†y, vui l√≤ng b·ªè qua email n√†y v√† m·∫≠t kh·∫©u c·ªßa b·∫°n s·∫Ω kh√¥ng thay ƒë·ªïi.`
¬† ¬† };
¬† ¬† 
¬† ¬† await transporter.sendMail(mailOptions);
¬† ¬† res.json({ message: 'Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i' });
¬† } catch (err) {
¬† ¬† res.status(500).json({ message: 'L·ªói server khi g·ª≠i email' });
¬† }
};

exports.resetPassword = async (req, res) => {
  try {
    const { password } = req.body;
    const token = req.params.token;

    const user = await User.findOne({ resetToken: token });
    if (!user) return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y user v·ªõi token n√†y." });

    if (user.resetTokenExpiration < Date.now())
      return res.status(400).json({ message: "Token ƒë√£ h·∫øt h·∫°n." });

    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(password, salt);
    user.resetToken = undefined;
    user.resetTokenExpiration = undefined;
    await user.save();

    res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (err) {
    console.error("L·ªói reset password:", err);
    res.status(500).json({ message: "L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u" });
  }
};

exports.uploadAvatar = async (req, res) => {
  try {
    // Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c upload b·ªüi multer ch∆∞a
    if (!req.file) {
      return res.status(400).json({ message: 'Vui l√≤ng ch·ªçn file avatar.' });
    }

    // 1. Upload file l√™n Cloudinary
    const result = await cloudinary.uploader.upload(req.file.path, {
        folder: 'group3-avatars', // Th∆∞ m·ª•c l∆∞u tr·ªØ tr√™n Cloudinary
        resource_type: 'image'
    });

    // 2. C·∫≠p nh·∫≠t URL avatar v√†o database
    const user = await User.findById(req.user.id);
    user.avatar = result.secure_url;
    await user.save();

    // 3. X√≥a file t·∫°m th·ªùi tr√™n server c·ª•c b·ªô
    fs.unlinkSync(req.file.path); 
    
    res.json({ avatar: result.secure_url, message: 'Upload avatar th√†nh c√¥ng!' });
  } catch (err) {
    // N·∫øu c√≥ l·ªói, ƒë·∫£m b·∫£o file t·∫°m th·ªùi v·∫´n b·ªã x√≥a
    if (req.file && fs.existsSync(req.file.path)) {
        fs.unlinkSync(req.file.path);
    }
    res.status(500).json({ message: 'L·ªói server khi upload avatar' });
  }
};

// controllers/userController.js - TH√äM
exports.refreshToken = async (req, res) => {
    const { refreshToken } = req.body;

    if (!refreshToken) {
        return res.status(401).json({ message: "Refresh Token b·ªã thi·∫øu" });
    }

    try {
        // 1. T√¨m token trong DB
        const storedToken = await RefreshToken.findOne({ token: refreshToken });

        if (!storedToken || storedToken.expiresAt < Date.now()) {
            // N·∫øu token kh√¥ng t·ªìn t·∫°i ho·∫∑c h·∫øt h·∫°n, x√≥a token l·ªói (n·∫øu c√≥)
            if (storedToken) await storedToken.deleteOne();
            return res.status(401).json({ message: "Refresh Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n" });
        }

        // 2. T√°i t·∫°o Access Token M·ªöI
        const user = await User.findById(storedToken.userId);
        if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

        const payload = { id: user.id, role: user.role };
        const newAccessToken = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: "1h" });

        // 3. X√≥a token c≈© v√† t·∫°o token m·ªõi ƒë·ªÉ tƒÉng b·∫£o m·∫≠t (Rotating Refresh Tokens)
        await storedToken.deleteOne();
        const newRefreshToken = await createRefreshToken(user._id);

        res.json({
            accessToken: newAccessToken,
            refreshToken: newRefreshToken,
        });

    } catch (err) {
        res.status(500).json({ message: "Server l·ªói khi Refresh Token" });
    }
};